name: Build

on: push

jobs:
  build:
    name: Build for ${{ matrix.display_name }}
    strategy:
      matrix:
        include:
          - display_name: Windows (x86)
            os: windows-2019
            family: windows
            arch: amd64

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        run: |
          git clone https://github.com/newton-blockchain/ton.git
          cd ton
          git submodule update --init
          mkdir build

      - name: Check out zlib repository (Windows only)
        if: ${{ matrix.family == 'windows' }}
        uses: actions/checkout@v2
        with:
          repository: desktop-app/zlib
          path: zlib
          ref: 2f6db2d81b3e91b3dcc7673be6cfd412fefd7e63

      - name: Check out vcpkg repository (Windows only)
        if: ${{ matrix.family == 'windows' }}
        uses: actions/checkout@v2
        with:
          repository: microsoft/vcpkg
          path: vcpkg

      - name: Setup msbuild.exe (Windows only)
        if: ${{ matrix.family == 'windows' }}
        uses: microsoft/setup-msbuild@v1.0.3

      - name: Install vcpkg openssl pthread (Windows only)
        run: |
          cd vcpkg
          bootstrap-vcpkg.bat
          vcpkg integrate install
          vcpkg install openssl:x64-windows pthread:x64-windows

      - name: Configure Windows
        if: ${{ matrix.family == 'windows' }}
        # working-directory: ton/build
        run: |
          set root=%cd%
          echo %root%
          cd ton/build
          cmake .. ^
            -DCMAKE_TOOLCHAIN_FILE=%root%/vcpkg/scripts/buildsystems/vcpkg.cmake ^
            -DZLIB_FOUND=1 ^
            -DZLIB_INCLUDE_DIR=%root%\zlib ^
            -DZLIB_LIBRARY=%root%\zlib\contrib\vstudio\vc14\x64\ZlibStatReleaseWithoutAsm\zlibstat.lib ^
            -DCMAKE_CXX_FLAGS="/DTD_WINDOWS=1 /EHsc /bigobj /W0" ^
            -DTON_USE_ABSEIL=OFF ^
            -DCMAKE_BUILD_TYPE=Release

      - name: Build
        working-directory: ton/build
        run: |
          cmake --build . \
            -t lite-client \
            -t tonlibjson

      - name: Show executables
        working-directory: ton/build
        run: |
          dir *.exe /a-D /S /B
          dir *.dll /a-D /S /B

      - name: Pack
        working-directory: ton/build
        run: |
          mkdir ../../artifacts && \
          mv crypto/fift ../../artifacts/fift-${{ matrix.family }}-${{ matrix.arch }} && \
          mv crypto/func ../../artifacts/func-${{ matrix.family }}-${{ matrix.arch }} && \
          mv lite-client/lite-client ../../artifacts/lite-client-${{ matrix.family }}-${{ matrix.arch }} && \
          mv rldp-http-proxy/rldp-http-proxy ../../artifacts/rldp-http-proxy-${{ matrix.family }}-${{ matrix.arch }} && \
          cp ../crypto/fift/lib/Asm.fif ../../artifacts/Asm.fif

      - name: Pack (Windows)
        if: ${{ matrix.family == 'windows' }}
        working-directory: ton/build
        run: |
          find tonlib
          mv tonlib/libtonlibjson.0.5.dll ../../artifacts/libtonlibjson-${{ matrix.family }}-${{ matrix.arch }}.dll

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ton-${{ matrix.family }}-${{ matrix.arch }}
          path: artifacts/*
          retention-days: 1

  # release:
  #   name: Create Release
  #   runs-on: ubuntu-20.04
  #   needs: build
  #   if: github.ref_type == 'tag'
  #   steps:
  #     - name: Create directory for artifacts
  #       run: mkdir artifacts

  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         path: artifacts

  #     - name: Create Release
  #       uses: ncipollo/release-action@v1
  #       with:
  #         artifacts: "artifacts/ton-linux-amd64/*,artifacts/ton-darwin-amd64/*"
  #         token: ${{ secrets.GITHUB_TOKEN }}
